name: CombinedTests

on:
  push:
    branches: [main]
  pull_request:

jobs:
  unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"
      # Repeat common setup steps (like installing Poetry) for both jobs
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}
      - run: poetry install --no-interaction
      - name: Run unit tests with coverage
        run: poetry run coverage run -m pytest tests/unit
      - run: poetry run coverage report
      - run: poetry run coverage html --show-contexts --title "Unit Test Coverage for ${{ github.sha }}"
      - name: Store unit test coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-unit
          path: htmlcov
      - name: Rename coverage file for artifact
        run: cp .coverage .coverage.unit
      - name: Store unit test coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-unit-${{ github.run_id }}
          path: .coverage.unit

  integration-tests:
    runs-on: ubuntu-latest
    container: python:3.11.7
    services:
      redis:
        image: redis:7.2.3
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}
      - run: poetry install --no-interaction
      - name: Run integration tests with coverage
        env:
          PYNENC__REDIS_HOST: "redis"
        run: poetry run coverage run -m pytest tests/integration
      - run: poetry run coverage report
      - run: poetry run coverage html --show-contexts --title "Integration Test Coverage for ${{ github.sha }}"
      - name: Store integration test coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-integration
          path: htmlcov
      - name: Debug list workspace files
        run: ls -la
      - name: Rename coverage file for artifact
        run: |
          echo "Checking for coverage files..."
          ls -la
          if ls .coverage* 1> /dev/null 2>&1; then
            cp .coverage* .coverage.integration
            ls -la .coverage.integration
          else
            echo "No coverage file found. Exiting." && exit 1
          fi
      - name: Store integration test coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-integration-${{ github.run_id }}
          path: .coverage.integration

  all-tests-completed:
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.7"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - run: poetry install --no-interaction
      - name: Debug available artifacts
        run: |
          echo "Listing available artifacts:"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | \
               jq -r '.artifacts[] | "\(.name) - \(.size_in_bytes) bytes"'
      - name: Download unit test coverage data
        uses: actions/download-artifact@v4
        with:
          name: coverage-data-unit-${{ github.run_id }}
          path: coverage/unit
      - name: Download integration test coverage data
        uses: actions/download-artifact@v4
        with:
          name: coverage-data-integration-${{ github.run_id }}
          path: coverage/integration
      - name: List downloaded files (debug)
        run: find coverage -type f
      - name: Combine coverage data
        run: |
          cp coverage/unit/.coverage.unit .
          cp coverage/integration/.coverage.integration .
          poetry run coverage combine .coverage.unit .coverage.integration
      - run: poetry run coverage report
      - run: poetry run coverage html --show-contexts --title "Combined Test Coverage"
      - name: Store combined test coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-${{ github.run_id }}
          path: htmlcov
